[
["the-bias-variance-tradeoff-overfitting-and-cross-validation.html", "3 The Bias-Variance Tradeoff, Overfitting, and Cross-Validation 3.1 Bias-Variance Tradeoff 3.2 Overfitting 3.3 Cross-Validation", " 3 The Bias-Variance Tradeoff, Overfitting, and Cross-Validation 3.1 Bias-Variance Tradeoff This came up briefly last week, but the bias-variance tradeoff is really crucial to everything we’ll talk about today. The basic idea is that you can partition error into two components: bias and variance. Bias refers to the extent to which a model produces parameter estimates that miss in a particular direction (e.g., consistently over-estimating or consistently under-estimating a parameter value). Variance refers to the extent to which a model produces parameter estimates that vary from their central tendency across different datasets. There is a tradeoff between bias and variance: all else equal, increasing bias will decrease variance. The basic idea here is that if we have a zero-bias estimator, it will tend to try to fit everything in the data, whereas an estimator biased in some direction won’t. This isn’t to say that bias is good or bad, just that there are times where we might want to increase bias to decrease variance. As we’ll see later, regularization is basically one method for introducing bias (to minimize variance). 3.2 Overfitting This is probably familiar to folks in here (and it came up last week), so I won’t say much about it here. The basic idea is that any data has signal and noise. Sometimes, something appears to be signal but is actually noise. That is, when our statistical models are searching for the best solution, they sometimes will be fooled into thinking some noise is signal. This is usually called overfitting, and it has presented a pretty substantial problem in statistical modeling. As you’ll see, one of our goals is to try to avoid overfitting. Also worth noting is that overfitting will tend to produce a model with high variance, because noise will vary from dataset to dataset (basically by definition), and so a model which has fit noise will not do well across different datasets (with different noise). 3.3 Cross-Validation Cross-validation generally refers to taking a model that you trained on some data and using it in a new dataset. Unlike a replication, the model parameters carry over from the training to the test data (i.e., you don’t simply use the same variables and re-estimate the model parameters; you save the model parameters, and use it to predict the outcome variable). You can use cross-validation both to train and evaluate a model. A simple example may make this clear. Let’s say we think home size (in square-feet) is the only relevant predictor for house price. So, we have some data on prices of recently sold houses, and estimate a model predicting house price from square-feet: \\[y_{price} = b_0 + b_1*sqaurefeet\\] Let’s say we get these parameter values: \\[y_{price} = 100 + 50*sqaurefeet\\] And now we want to cross-validate in a hold-out sample. We wouldn’t simply estimate this model again: \\[y_{price} = b_0 + b_1*sqaurefeet\\] We would instead apply this model: \\[y_{price} = 100 + 50*sqaurefeet\\] And evaluate how well it did. We could do this either by how much it misses, which is usually done with root mean squared error (RMSE): \\[MSE = \\frac{1}{n}\\sum\\limits_{i=1}^{n}(y_i - \\hat{y_i})^2\\] \\[RMSE = \\sqrt{MSE}\\] Typically, people will also look at prediction accuracy, using the model’s \\(R^2\\). This is interpreted the same way as \\(R^2\\) always is (as the % of variance in the outcome accounted for by the model). 3.3.1 K-fold cross-validation There are different varieties of cross-validation. The most intuitive version is to create a single partition of data (i.e., split full data frame into two dataframes: training and test). However, there are other methods for cross-validation. One that has been gaining steam (or is maybe already at full steam at this point) is k-fold cross-validation. The basic idea is that we split a dataset into k subsamples (called folds). We then treat one subsample as the holdout sample, train on the remaining subsamples, and cross-validate on the holdout sample; then rinse and repeat so to speak. An example will probably help here. Let’s take a ridiculously simple example (based on the earlier example). We want to predict house sale price from square footage: \\[y_{price} = b_0 + b_1*sqaurefeet\\] Let’s say we have just 30 cases, and we use 10-fold cross validation. Let each observation be indicated by \\(o_i\\), so the first observation is \\(o_1\\), the second is \\(o_2\\), and the third is \\(o_3\\), etc. First, we would fit a model using folds 2 through 10 (i.e., \\(o_4\\) to \\(o_30\\)), and then test it on the first fold (\\(o_1\\) to \\(o_3\\)). Then, we would fit the model using folds 1 and 3-10 (i.e., \\(o_1\\) to \\(o_3\\) &amp; \\(o_7\\) to \\(o_30\\)) and test it on the 2nd fold (\\(o_4\\), \\(o_5\\), \\(o_6\\)), and so on until each fold was used as the holdout sample. Then, we calculate the average performance across all of the tests. Note that you can also use k-fold cross-validation for training purposes. Basically, this works by taking the best fitting model from a k-fold cross-validation procedure, and then testing it on a new holdout sample. "],
["regularization.html", "4 Regularization 4.1 Ridge: all of these features matter, but only a little bit. 4.2 Lasso: only some features matter, and they might matter a lot 4.3 Elastic Net: maybe everything matters, and maybe only a little bit.", " 4 Regularization Now let’s get to regularized regression. This is a pretty simple extension of OLS regression. The logic of it is basically that OLS regression is minimally biased, but because of this, is higher variance than we might want. So, the solution is to introduce some bias into the model that will decrease variance. This takes the form of a new penalization, which tends to either be focused on parameter size, number of parameters, or both. Let’s start with the first. I find it helpful to think of these as having different beliefs, and choosing one depends on whether or not those beliefs seem correct. 4.1 Ridge: all of these features matter, but only a little bit. Ridge regression is basically OLS regression with an extra term. As a refresher, OLS seeks to minimize the sum of squared error, or: \\[SSE = \\sum\\limits_{i=1}^n = (y_i - \\hat{y_i})^2\\] Ridge adds an additional penalty: \\[SSE_{L2} = \\sum\\limits_{i=1}^n = (y_i - \\hat{y_i}^2) + \\lambda \\sum\\limits_{j=1}^p \\beta^2_j\\] This makes it so that paramter values are only allowed to be large if they reduce error enough to justify their size. Functionally, this makes it so parameter values shrink towards 0. You can hopefully see this in that as our paramater values (our betas) increase in size, error increases, since we are adding the sum of squared beta values, times some constant \\(\\lambda\\), to our error term SSE. So, unless the parameter values decrease the first part of the error term (the ordinary sum of squared error; to the left of our new penalty) proportionally to their magnitude, they are shrunk toward 0. The extent to which they are shrunk towards 0 depends on the value of \\(\\lambda\\); higher values lead to more shrinkage than lower values. This is called a hyperparameter because it’s a parameter that governs other parameters. You can think of \\(\\lambda\\) as sort of the cost associated with larger parameter values: higher values of lambda are like telling your model that larger parameter values are more costly (so don’t make them large for nothing). You can think of this penalty as introducing a specific type of bias: bias towards smaller parameter values. However, since larger parameter values can result from overfitting, this bias can result in reducing variance. So why does Ridge do that and why is it useful? As I said earlier, I find it useful to think of statistical tools as having certain beliefs, and as being useful when those beliefs seem more or less true (in some particular case). Ridge believes that all of the variables you’re considering matter, but that most of them matter very little. Put differently, it believes that each variable you’ve entered belongs in the model, but that most or all only have small contributions. Because of this, people often say that ridge doesn’t perform feature selection, and shouldn’t be used if you need to select features (i.e., variables). This makes sense once you think of what Ridge believes: it believes every variable you’re telling it to use should be in the model, but many will simply have small impacts. If we want to select features (i.e., decide what variables go in our model), we need a different tool with a different set of beliefs. 4.2 Lasso: only some features matter, and they might matter a lot Another popular form of regularized regression is the least absolute shrinkage and selection operator model, or lasso. Unlike ridge, lasso’s regularization simultaneously performs feature selection and model improvement. Just like ridge, lasso is essentially our old friend OLS regression with an extra term added to error, which penalizes non-zero parameter values: \\[SSE_{L1} = \\sum\\limits_{i=1}^n = (y_i - \\hat{y_i}^2) + \\lambda \\sum\\limits_{j=1}^p |\\beta_j|\\] It’s sort of hard (at least for me) to have a strong intuition about why this simple change leads to a model that functions differently. But, the basic idea is that penalizing the absolute value leads to some parameters actually being set to zero; the idea (I think) is that penalizing the absolute value leads to small departures from zero (e.g., .1) to be relatively more penalized than when you’re penalizing the squared value (since squaring a value &lt; 1 leads to a smaller value than its absolute value). This is most consequential for correlated predictors: Ridge will allow each of k correlated predictors to basically share the predictive duty, whereas Lasso will tend to pick the best and ignore the rest. SO, just like with ridge, lasso introduces bias, and its bias is that many predictors will have no relation to the outcome variable (i.e., only some features matter). Let’s walk through an example with correlated predictors that I think will help. Let’s say we have an outcome \\(Y\\), and two predictors \\(X_1\\) and \\(X_2\\). And let’s imagine \\(X_1\\) and \\(X_2\\) are highly correlated (\\(r_{X_1, X_2} = .90\\)). Let’s say a model (Model 1) that contains predictors gives us this solution: \\[Model 1: y_i = .40*X_1 + .40*X_2\\] According to the path algebra, including just one of these predictors, \\(X_1\\), in the model would give us the following: \\[Model 2: y_i = .76*X_1\\] Note, this is just the path from \\(X_2\\) to \\(Y\\) (.40) times the correlation between \\(X_1\\) and \\(X_2\\) (.90). So how would each of these penalties treat this? Let’s walk through it: lambda &lt;- .1 ridge_penalty_Model_1 &lt;- lambda*(sum(c(.40^2, .40^2))) ridge_penalty_Model_2 &lt;- lambda*(sum(c(.76^2, 0^2))) ridge_penalties &lt;- rbind(ridge_penalty_Model_1, ridge_penalty_Model_2) lasso_penalty_Model_1 &lt;- lambda*(sum(c(abs(.40), abs(.40)))) lasso_penalty_Model_2 &lt;- lambda*(sum(c(abs(.76), abs(0)))) lasso_penalties &lt;- rbind(lasso_penalty_Model_1, lasso_penalty_Model_2) penalties &lt;- cbind(ridge_penalties, lasso_penalties) colnames(penalties)&lt;- c(&quot;ridge&quot;, &quot;lasso&quot;) row.names(penalties) &lt;- c(&quot;model 1&quot;, &quot;model 2&quot;) knitr::kable(penalties, digits = 3) ridge lasso model 1 0.032 0.080 model 2 0.058 0.076 Now what you could hopefully see there is that, all else equal, lasso prefers fewer predictors (which can have larger values) than ridge. How much it penalizes predictors depends again on \\(\\lambda\\), which again is a hyperparameter. So returning to why we would use it, it’s easiest for me to see when it would be useful by thinking about what Lasso believes: it believes that non-zero predictors are costly (and cost doesn’t accelerate with parameter value size, like ridge does). It (sort of) believes that only some of the variables are needed, and the ones that are needed can take on relatively larger sizes. What if our belief is somewhere in between these options: that some variables may not be needed (may actually be zero), but that many of the variables should have smaller values? 4.3 Elastic Net: maybe everything matters, and maybe only a little bit. Elastic net combines the penalties used by ridge and lasso. In doing so, it basically takes the middle ground between these two methods: penalizing non-zero values (feature selection) and penalizing values the further they depart from zero (regularization). So now, our error has three terms: sum of squared errors ridge penalty lasso penalty The formula for this error term is: \\[SSE_{Enet} = \\sum\\limits_{i=1}^n = (y_i - \\hat{y_i}^2) + \\lambda_1 \\sum\\limits_{j=1}^p \\beta^2_j + \\lambda_2 \\sum\\limits_{j=1}^p |\\beta_j|\\] Basically, elastic net is sort of a best of both worlds approach: it gives you the feature selection of lasso, and regularizes as effective as ridge. It thus introduces two dimensions of bias: that most predictors have small relations to the outcome. that many predicotrs have no relation to the outcome. How much each is priortized depends on the sie of \\(\\lambda_1\\) and \\(\\lambda_2\\) respectively. It’s often a great place to start, because as you’re tuning the hyperparameters, you can get to one of the other methods if that is truly the best method. For example, if lasso is actually the best method for your data, then (if your training is working well) you should end up with a zero value for \\(\\lambda_1\\), leading to the ridge penalty dropping out of the model (and leaving you with a lasso model). However, in my limited experience, it usually ends up with some non-zero value for both (which I think says something about the problems we deal with). In terms of beliefs, Elastic net is basically a more flexible thinker: it thinks we might only need few predictors and that each predictor may only contribute a little bit, and its willing to weigh these things more or less depending on what works better (either determined a priori, or determined via training). Okay, this has been a (very brief) intro to regularized regression and some foundational concepts in machine learning necessary to understand it. Now let’s walk through an example: We’re going to work with this data on wine reviews. It has the score it received in a rating, as well as some data about the wine, and a description of the wine. We’ll see how well we can predict the rating based on the data about the wine (including the description). I found this on &lt;kaggle.com&gt; # clear the environment, just to be safe rm(list=ls()) library(caret) ## Loading required package: lattice ## Loading required package: ggplot2 library(tidyverse) ## -- Attaching packages ----------------------------------------------------------------- tidyverse 1.2.0 -- ## v tibble 1.3.4 v purrr 0.2.3 ## v tidyr 0.7.1 v dplyr 0.7.3 ## v readr 1.1.1 v stringr 1.2.0 ## v tibble 1.3.4 v forcats 0.2.0 ## -- Conflicts -------------------------------------------------------------------- tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() ## x purrr::lift() masks caret::lift() library(tidytext) library(topicmodels) wine &lt;- rio::import(&quot;winemag-data_first150k.csv&quot;) %&gt;% janitor::clean_names() %&gt;% rename(id = v1) ## Read 59.6% of 150935 rows Read 150930 rows and 11 (of 11) columns from 0.046 GB file in 00:00:03 wine &lt;- sample_n(wine, 500) Okay, before we start down the modelling road, we want to do something with the descriptions. We’ll separate out the description, and do some automated text analysis, and use the output of those analyses as features. This should make a bit more sense as we walk through. # first we need to load in a dataframe of stopwords # these are basically words that don&#39;t have content # and that we don&#39;t need (e.g., &quot;the&quot;, &quot;a&quot;, &quot;and&quot;, etc.) data(&quot;stop_words&quot;) wine_text_expand&lt;- wine %&gt;% # take just the id and description select(id, description) %&gt;% # this will make it so that the description is # broken into single words, with a row # corresponding to each word in each wine&#39;s description unnest_tokens(word, description) %&gt;% anti_join(stop_words) ## Joining, by = &quot;word&quot; Let’s do some sentiment analysis, since that seems like it will definitely be relevant. Sentiment analysis is intended to extract the emotional tone of a text, and in this case, will basically give us a score corresponding to how poisitive and negative each word is. We’ll leave it at sentiment analysis for the sake of time. description_sentiment &lt;- wine_text_expand %&gt;% # this makes it so that all is saved is a # data frame that contains the words in the afinn # sentiment dictionary, the score associated with those words, # and the id for the wine. inner_join(get_sentiments(&quot;afinn&quot;)) %&gt;% # group by wine id group_by(id) %&gt;% # summarize such that we have a single sentiment score # per wine id summarize(sentiment = mean(score)) ## Joining, by = &quot;word&quot; description_sentiment ## # A tibble: 408 x 2 ## id sentiment ## &lt;int&gt; &lt;dbl&gt; ## 1 875 0.6666667 ## 2 2090 1.0000000 ## 3 2250 1.0000000 ## 4 2261 2.0000000 ## 5 2700 1.6666667 ## 6 3097 0.5000000 ## 7 3356 2.5000000 ## 8 3604 0.7500000 ## 9 3921 1.3333333 ## 10 4118 2.5000000 ## # ... with 398 more rows And, let’s merge that back into the wine dataframe. wine_for_ml &lt;- wine %&gt;% left_join(description_sentiment, by = &quot;id&quot;) %&gt;% # removing raw description for now select(-description, -id) %&gt;% # just removing missing values, because they complicate things na.omit() # Set seed for consistency&#39;s sake set.seed(500) # This part creates a list of values; # these values are the row numbers for data included in the training set # we&#39;re splitting it 75-25, such that 75% of cases will be in the training set (25% in the test). inTrain &lt;- createDataPartition(y = wine_for_ml$points, p = .75, list = FALSE) # subsets the training data (those data whose row number appears in the inTrain object) training &lt;- wine_for_ml[inTrain,] # subsets the test data (those data whose row number DOES NOT appear in the inTrain object) testing &lt;- wine_for_ml[-inTrain,] # Sets parameters for training; # telling it to use 10-fold cross-validation, and to save the predictions. train_control&lt;- trainControl(method=&quot;cv&quot;, number=10, savePredictions = TRUE) fit_ridge &lt;- train(points ~ ., data = training, trControl = train_control, method = &quot;ridge&quot;, preProc = c(&quot;center&quot;, &quot;scale&quot;)) fit_ridge$ # This uses the fitted model to get predicted values on # the testing data (the 25 case holdout sample) pred_ridge &lt;- predict(fit_ridge, newdata = testing) # This gets R^2 and RMSE for extraversion model ext_fitstat_enet &lt;- postResample(pred = pred_ridge, obs = testing$ext_t) # This does the same predictive model for Extraversion BUT # uses ridge algorithm instead of elastic net Fit_E_ridge &lt;- train(ext_t ~ ., data = training, trControl = train_control, method = &quot;ridge&quot;, preProc = c(&quot;center&quot;, &quot;scale&quot;)) # predicted values for holdout based on # model trained with ridge ext_pred_ridge &lt;- predict(Fit_E_ridge, newdata = testing) # Gets R^2 and RMSE for ridge model ext_fitstat_ridge &lt;- postResample(pred = ext_pred_ridge, obs = testing$ext_t) "]
]
